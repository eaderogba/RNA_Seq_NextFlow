#!/bin/bash
# NEXTFLOW TASK: MULTIQC
set -e
set -u
NXF_DEBUG=${NXF_DEBUG:=0}; [[ $NXF_DEBUG > 1 ]] && set -x
NXF_ENTRY=${1:-nxf_main}


nxf_sleep() {
  sleep $1 2>/dev/null || sleep 1;
}

nxf_date() {
    local ts=$(date +%s%3N);
    if [[ ${#ts} == 10 ]]; then echo ${ts}000
    elif [[ $ts == *%3N ]]; then echo ${ts/\%3N/000}
    elif [[ $ts == *3N ]]; then echo ${ts/3N/000}
    elif [[ ${#ts} == 13 ]]; then echo $ts
    else echo "Unexpected timestamp value: $ts"; exit 1
    fi
}

nxf_env() {
    echo '============= task environment ============='
    env | sort | sed "s/\(.*\)AWS\(.*\)=\(.\{6\}\).*/\1AWS\2=\3xxxxxxxxxxxxx/"
    echo '============= task output =================='
}

nxf_kill() {
    declare -a children
    while read P PP;do
        children[$PP]+=" $P"
    done < <(ps -e -o pid= -o ppid=)

    kill_all() {
        [[ $1 != $$ ]] && kill $1 2>/dev/null || true
        for i in ${children[$1]:=}; do kill_all $i; done
    }

    kill_all $1
}

nxf_mktemp() {
    local base=${1:-/tmp}
    mkdir -p "$base"
    if [[ $(uname) = Darwin ]]; then mktemp -d $base/nxf.XXXXXXXXXX
    else TMPDIR="$base" mktemp -d -t nxf.XXXXXXXXXX
    fi
}

nxf_fs_copy() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  cp -fRL $source $target/$basedir
}

nxf_fs_move() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  mv -f $source $target/$basedir
}

nxf_fs_rsync() {
  rsync -rRl $1 $2
}

nxf_fs_rclone() {
  rclone copyto $1 $2/$1
}

nxf_fs_fcp() {
  fcp $1 $2/$1
}

on_exit() {
    exit_status=${nxf_main_ret:=$?}
    printf -- $exit_status > /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/82/21404dce656d792b15d5981b94004d/.exitcode
    set +u
    docker rm $NXF_BOXID &>/dev/null || true
    exit $exit_status
}

on_term() {
    set +e
    docker stop $NXF_BOXID
}

nxf_launch() {
    docker run -i --cpu-shares 1024 -e "NXF_TASK_WORKDIR" -v /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work:/home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work -w "$PWD" -u $(id -u):$(id -g) --name $NXF_BOXID nextflow/rnaseq-nf /bin/bash -ue /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/82/21404dce656d792b15d5981b94004d/.command.sh
}

nxf_stage() {
    true
    # stage input files
    rm -f multiqc_report.html1
    rm -f multiqc_report.html2
    rm -f multiqc_report.html3
    rm -f multiqc_report.html4
    rm -f multiqc_report.html5
    rm -f multiqc_report.html6
    rm -f multiqc_report.html7
    rm -f multiqc_report.html8
    ln -s /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/95/41c634de62397d1b0bb9334a457b48/fastqc_SRR28420795_logs multiqc_report.html1
    ln -s /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/d7/d8897ca944222884e05ef04c3cccef/fastqc_SRR28420797_logs multiqc_report.html2
    ln -s /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/79/c18c082ca7eecfeb05068dee1a746e/fastqc_SRR28420796_logs multiqc_report.html3
    ln -s /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/82/609950b90b7e8fda27a2ecf10ac24d/fastqc_SRR28420798_logs multiqc_report.html4
    ln -s /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/3a/ff81257b91dac225aa73c6ca6efdba/SRR28420798 multiqc_report.html5
    ln -s /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/43/bb72b6e999a8cc862dceab755f67c9/SRR28420795 multiqc_report.html6
    ln -s /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/8f/8dc52336d82cc9f3d4e2bab9724d1c/SRR28420797 multiqc_report.html7
    ln -s /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/42/87b21bf6885257dedd0f0b7953b417/SRR28420796 multiqc_report.html8
}

nxf_unstage() {
    true
    [[ ${nxf_main_ret:=0} != 0 ]] && return
}

nxf_main() {
    trap on_exit EXIT
    trap on_term TERM INT USR2
    trap '' USR1

    [[ "${NXF_CHDIR:-}" ]] && cd "$NXF_CHDIR"
    export NXF_BOXID="nxf-$(dd bs=18 count=1 if=/dev/urandom 2>/dev/null | base64 | tr +/ 0A | tr -d '\r\n')"
    NXF_SCRATCH=''
    [[ $NXF_DEBUG > 0 ]] && nxf_env
    touch /home/eaderogba279/Bionformatics_Projects/RNA_Seq_NextFlow/work/82/21404dce656d792b15d5981b94004d/.command.begin
    set +u
    set -u
    [[ $NXF_SCRATCH ]] && cd $NXF_SCRATCH
    export NXF_TASK_WORKDIR="$PWD"
    nxf_stage

    set +e
    (set -o pipefail; (nxf_launch | tee .command.out) 3>&1 1>&2 2>&3 | tee .command.err) &
    pid=$!
    wait $pid || nxf_main_ret=$?
    nxf_unstage
}

$NXF_ENTRY
